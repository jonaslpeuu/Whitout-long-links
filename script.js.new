// WCLinks - Link Kürzer Script
// Verwendet das storage-Objekt aus storage.js und kommuniziert mit dem Python-Server

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM vollständig geladen');
    
    // DOM-Elemente abrufen
    const shortenButton = document.getElementById('shortenButton');
    const originalLinkInput = document.getElementById('originalLink');
    const shortLinkInput = document.getElementById('shortLink');
    const copyButton = document.getElementById('copyButton');
    const resultContainer = document.getElementById('result');
    const themeToggle = document.getElementById('themeToggle');
    const totalLinks = document.getElementById('totalLinks');
    const totalClicks = document.getElementById('totalClicks');
    const avgClickRate = document.getElementById('avgClickRate');
    
    console.log('UI-Elemente gefunden:', {
        shortenButton: !!shortenButton,
        originalLinkInput: !!originalLinkInput,
        shortLinkInput: !!shortLinkInput,
        copyButton: !!copyButton,
        resultContainer: !!resultContainer
    });
    
    // Verstecke die Ergebnis-Elemente initial
    if (resultContainer) resultContainer.style.display = 'none';
    
    // Theme initialisieren
    const isDarkMode = localStorage.getItem('theme') === 'dark';
    applyTheme(isDarkMode ? 'dark' : 'light');
    
    // Statistiken aktualisieren
    updateStats();
    
    // Event-Listeners
    if (shortenButton) {
        shortenButton.addEventListener('click', function(event) {
            event.preventDefault();
            console.log('Kürzen-Button geklickt');
            const url = originalLinkInput.value.trim();
            shortenLink(url);
        });
    }
    
    if (copyButton) {
        copyButton.addEventListener('click', function(event) {
            event.preventDefault();
            copyToClipboard();
        });
    }
    
    if (themeToggle) {
        themeToggle.addEventListener('click', function() {
            const currentTheme = document.body.classList.contains('dark') ? 'dark' : 'light';
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            applyTheme(newTheme);
        });
    }
    
    // Link-Kürzungsfunktion mit TinyURL-API
    function shortenLink(url) {
        console.log('shortenLink aufgerufen mit URL:', url);
        
        try {
            // URL validieren
            if (!url) {
                throw new Error('Bitte gib einen Link ein!');
            }
            
            // Prüfen, ob URL mit http:// oder https:// beginnt
            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                url = 'https://' + url;
                console.log('Korrigierte URL mit https:', url);
            }

            // Statusmeldung anzeigen
            showNotification('Link wird gekürzt...', 'info');
            
            // Backend-API für TinyURL-Verarbeitung aufrufen
            fetch('http://localhost:5000/api/shorten', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url: url })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const shortenedUrl = data.shortUrl;
                    console.log('Echter TinyURL-Link erstellt:', shortenedUrl);
                    
                    // Link in der Statistik speichern - generiere einen Code aus der URL
                    const randomCode = shortenedUrl.split('/').pop();
                    storage.addLink(url, randomCode);
                    
                    // UI aktualisieren
                    displayResult(shortenedUrl);
                    showNotification('Link erfolgreich gekürzt!', 'success');
                } else {
                    console.error('Fehler beim Kürzen des Links:', data.error);
                    showNotification('Fehler beim Kürzen des Links: ' + (data.message || data.error), 'error');
                }
            })
            .catch(error => {
                console.error('API-Anfrage fehlgeschlagen:', error);
                showNotification('Server-Fehler. Bitte versuche es später erneut.', 'error');
            });
        } catch (error) {
            console.error('Fehler beim Kürzen des Links:', error);
            showNotification(error.message, 'error');
        }
    }
    
    // Funktion zum Anzeigen des Ergebnisses
    function displayResult(shortenedUrl) {
        console.log('Zeige Ergebnis an:', shortenedUrl);
        
        // UI-Elemente abrufen
        const resultContainer = document.getElementById('result');
        const shortLinkInput = document.getElementById('shortLink');
        const copyButton = document.getElementById('copyButton');
        
        if (!resultContainer || !shortLinkInput) {
            console.error('UI-Elemente für Ergebnisanzeige nicht gefunden');
            return;
        }
        
        // Ergebnis anzeigen
        shortLinkInput.value = shortenedUrl;
        resultContainer.style.display = 'flex';
        
        // Ersetze den onClick-Event des Kopier-Buttons
        if (copyButton) {
            copyButton.onclick = function() {
                copyToClipboardSimple(shortenedUrl);
            };
        }
        
        // Erzwinge die Anzeige durch CSS (zusätzliche Sicherheitsmaßnahme)
        addForceDisplayStyles();
    }
    
    // Kopieren-Funktion
    function copyToClipboard() {
        const shortLinkInput = document.getElementById('shortLink');
        if (!shortLinkInput || !shortLinkInput.value) {
            showNotification('Es gibt nichts zu kopieren', 'error');
            return;
        }
        
        try {
            // Moderne Clipboard API verwenden, wenn verfügbar
            if (navigator.clipboard) {
                navigator.clipboard.writeText(shortLinkInput.value)
                    .then(() => {
                        showSuccessCopy();
                    })
                    .catch(() => {
                        fallbackCopyMethod();
                    });
            } else {
                fallbackCopyMethod();
            }
        } catch (error) {
            console.error('Fehler beim Kopieren:', error);
            showNotification('Kopieren fehlgeschlagen', 'error');
        }
    }
    
    // Fallback für ältere Browser
    function fallbackCopyMethod() {
        try {
            // Eingabefeld auswählen
            const shortLinkInput = document.getElementById('shortLink');
            shortLinkInput.select();
            shortLinkInput.setSelectionRange(0, 99999);
            
            // Kopieren
            const successful = document.execCommand('copy');
            
            if (successful) {
                showSuccessCopy();
            } else {
                throw new Error('Kopieren mit execCommand fehlgeschlagen');
            }
        } catch (error) {
            console.error('Fallback-Kopieren fehlgeschlagen:', error);
            showNotification('Kopieren fehlgeschlagen. Bitte manuell kopieren.', 'error');
        }
    }
    
    // Animation beim erfolgreichen Kopieren
    function showSuccessCopy() {
        showNotification('Link in die Zwischenablage kopiert!', 'success');
        
        // Kopieren-Button animieren
        const copyButton = document.getElementById('copyButton');
        if (copyButton) {
            copyButton.classList.add('success');
            setTimeout(() => copyButton.classList.remove('success'), 1000);
        }
    }
    
    // Statistiken aktualisieren
    function updateStats() {
        const stats = storage.getStats();
        if (totalLinks) totalLinks.textContent = stats.totalLinks;
        if (totalClicks) totalClicks.textContent = stats.totalClicks;
        if (avgClickRate) avgClickRate.textContent = stats.avgClickRate.toFixed(1) + '%';
    }
    
    // Theme anwenden
    function applyTheme(theme) {
        if (theme === 'dark') {
            document.body.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.body.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        }
    }
    
    // Benachrichtigungen anzeigen
    function showNotification(message, type) {
        // Notification-Element erstellen
        const notification = document.createElement('div');
        notification.className = `notification ${type || 'info'}`;
        notification.textContent = message;
        
        // Container erstellen oder abrufen
        let container = document.querySelector('.notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'notifications-container';
            document.body.appendChild(container);
        }
        
        // Benachrichtigung einfügen
        container.appendChild(notification);
        
        // Einblend-Animation
        setTimeout(() => notification.classList.add('show'), 10);
        
        // Nach Verzögerung entfernen
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
    
    // Anzeige-Styles erzwingen
    function addForceDisplayStyles() {
        const styleId = 'wclinks-force-styles';
        
        // Nur hinzufügen, wenn noch nicht vorhanden
        if (!document.getElementById(styleId)) {
            const style = document.createElement('style');
            style.id = styleId;
            style.textContent = `
                .result-container { display: flex !important; }
                #shortLink { display: block !important; width: 100% !important; }
                #copyButton { display: block !important; }
                #result { display: flex !important; }
            `;
            document.head.appendChild(style);
            console.log('Erzwungene Anzeige-Styles hinzugefügt');
        }
    }
    
    // Vereinfachte Funktion zum Kopieren in die Zwischenablage
    // Wird direkt am dynamisch erstellten Button verwendet
    function copyToClipboardSimple(text) {
        if (!text) {
            showNotification('Es gibt nichts zu kopieren', 'error');
            return;
        }
        
        try {
            // Moderne Clipboard API verwenden, wenn verfügbar
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showNotification('Link in die Zwischenablage kopiert!', 'success');
                    })
                    .catch(error => {
                        console.error('Clipboard API Fehler:', error);
                        fallbackCopyMethodSimple(text);
                    });
            } else {
                fallbackCopyMethodSimple(text);
            }
        } catch (error) {
            console.error('Fehler beim Kopieren:', error);
            showNotification('Kopieren fehlgeschlagen', 'error');
        }
    }
    
    // Fallback-Methode für die vereinfachte Kopier-Funktion
    function fallbackCopyMethodSimple(text) {
        try {
            // Temporäres Element erstellen
            const textarea = document.createElement('textarea');
            textarea.value = text;
            
            // Element unsichtbar machen und zum Dokument hinzufügen
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            
            // Text auswählen und kopieren
            textarea.select();
            const successful = document.execCommand('copy');
            
            // Element wieder entfernen
            document.body.removeChild(textarea);
            
            if (successful) {
                showNotification('Link in die Zwischenablage kopiert!', 'success');
            } else {
                throw new Error('Kopieren mit execCommand fehlgeschlagen');
            }
        } catch (error) {
            console.error('Fallback-Kopieren fehlgeschlagen:', error);
            showNotification('Kopieren fehlgeschlagen. Bitte manuell kopieren.', 'error');
        }
    }
});
